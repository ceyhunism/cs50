#include <iostream>

using namespace std;
 
// A recursive binary search function. It returns location of x in
// given array arr[l..r] is present, otherwise -1
int binarySearchRecursive(int arr[], int l, int r, int x)
{
   if (r >= l)
   {
        int mid = l + (r - l)/2;
 
        // If the element is present at the middle itself
        if (arr[mid] == x)  return mid;
 
        // If element is smaller than mid, then it can only be present
        // in left subarray
        if (arr[mid] > x) return binarySearchRecursive(arr, l, mid-1, x);
 
        // Else the element can only be present in right subarray
        return binarySearchRecursive(arr, mid+1, r, x);
   }
 
   // We reach here when element is not present in array
   return -1;
}

// A iterative binary search function. It returns location of x in
// given array arr[l..r] if present, otherwise -1
int binarySearchIterative(int arr[], int l, int r, int x)
{
  while (l <= r)
  {
    int m = l + (r-l)/2;
 
    // Check if x is present at mid
    if (arr[m] == x) 
        return m;  
 
    // If x greater, ignore left half  
    if (arr[m] < x) 
        l = m + 1; 
 
    // If x is smaller, ignore right half 
    else
         r = m - 1; 
  }
 
  // if we reach here, then element was not present
  return -1; 
}
 
int main(void)
{
	int n;
	cout << "Enter size of array: ";
	cin >> n;
	
	// array init
	int *array;
	array = new int [n]; // dynamic array
	
	//input array elements
	cout << "Enter " << n << " elements of array: ";
	for(int i = 0; i < n; i++)
	{
		cin >> array[i];		
	}
	
	int x = 10;
	cout << "Enter key: ";
	cin >> x;
   
   	int result = binarySearchIterative(array, 0, n-1, x);
   
	(result == -1)? printf("Element is not present in array \n")
	             : printf("Element is present at index %d \n", result);
	             
	result = binarySearchRecursive(array, 0, n-1, x);
	(result == -1)? printf("Element is not present in array \n")
	             : printf("Element is present at index %d \n", result);
             
   return 0;
}
